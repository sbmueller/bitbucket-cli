#!/usr/bin/python3

import argparse
import logging
import os

from bitbucket_cli.server import Server
from bitbucket_cli.config import Config
from bitbucket_cli.repo import GitRepo


CONFIGFILE = os.path.join(
    os.path.expanduser("~"), ".config", "bitbucket-cli", "config.json"
)

if __name__ == "__main__":
    # TODO set to warning
    logging.getLogger().setLevel(logging.DEBUG)

    parser = argparse.ArgumentParser(description="BitBucket CLI")

    # general arguments
    parser.add_argument(
        "-u",
        "--user",
        action="store",
        required=False,
        help="Username for BitBucket. If not provided, will be read from config file.",
    )
    parser.add_argument(
        "-p",
        "--passwd",
        action="store",
        required=False,
        help="Password or token for BitBucket. If not provided, will be read from config file.",
    )
    parser.add_argument(
        "-s",
        "--server",
        action="store",
        required=False,
        help="URL for BitBucket server. If not provided, will be read from config file.",
    )

    # create subparsers
    subparser_command = parser.add_subparsers(dest="command")
    # project subparser
    parser_project = subparser_command.add_parser("project")
    parser_project_action = parser_project.add_subparsers(dest="action")
    parser_project_action_list = parser_project_action.add_parser("list")

    # pull request subparser
    parser_pr = subparser_command.add_parser("pr")
    parser_pr_action = parser_pr.add_subparsers(dest="action")
    parser_pr_action_approved = parser_pr_action.add_parser("approved")
    parser_pr_action_open = parser_pr_action.add_parser("open")
    parser_pr_action_approved.add_argument(
        "--prid", metavar="pr-id", required=True, help="ID of pull request"
    )
    parser_pr_action_open.add_argument(
        "--src", required=False, help="Source branch, auto detected when not provided"
    )
    parser_pr_action_open.add_argument(
        "--dst", required=False, help="Destination branch"
    )
    parser_pr_action_open.add_argument(
        "--title",
        required=False,
        help="Title of the pull request, auto detected when not provided",
    )
    parser_pr_action_open.add_argument(
        "--desc",
        required=False,
        help="Description of the pull request, auto detected when not provided",
    )

    # parse arguments
    parsed = parser.parse_args()

    # TODO remove
    print(parsed)

    config = Config(CONFIGFILE)

    # if required arguments are not provided, try to read from config file
    if parsed.server is None:
        # try to get server from the yaml file
        logging.info("No server provided, trying to read from config file")
        parsed.server = config.get_config_value("server")
    if parsed.user is None:
        # try to get user from the yaml file
        logging.info("No user provided, trying to read from config file")
        parsed.user = config.get_config_value("user")
    if parsed.passwd is None:
        # try to get pass from the yaml file
        logging.info("No passwd provided, trying to read from config file")
        parsed.passwd = config.get_config_value("passwd")

    # create a Server object
    server = Server(parsed.server, parsed.user, parsed.passwd)

    # decision tree for commands and actions
    if parsed.command == "project":
        if parsed.action == "list":
            print(server.project_list())
    if parsed.command == "pr":
        # create repo object
        repo = GitRepo()
        project = repo.get_remote_project()
        repo_name = repo.get_repo_name()
        if parsed.action == "approved":
            print(server.pr_approved(project, repo_name, parsed.prid))
        if parsed.action == "open":
            # get src branch from repo
            src_branch = repo.get_branch_name()
            title = repo.get_last_commit_title()
            desc = repo.get_last_commit_desc()
            if parsed.src is not None:
                source_branch = parsed.src
            if parsed.title is not None:
                title = parsed.title
            if parsed.desc is not None:
                desc = parsed.desc
            server.open_pr_in_repo(
                project, repo_name, src_branch, parsed.dst, title, desc, None
            )
